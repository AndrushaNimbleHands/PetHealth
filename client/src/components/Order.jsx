import React, { useEffect, useState } from 'react';
import '../assets/styles/main.scss';

export default function Order() {
    const [orders, setOrders] = useState([]);
    const [filteredOrders, setFilteredOrders] = useState([]);
    const [loading, setLoading] = useState(true);
    const [statusFilter, setStatusFilter] = useState('');
    const [searchNumber, setSearchNumber] = useState('');

    useEffect(() => {
        const token = localStorage.getItem('token');
        if (!token) return;

        fetch('/api/shop/orders', {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        })
            .then(res => res.json())
            .then(data => {
                const sorted = data.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
                setOrders(sorted);
                setFilteredOrders(sorted);
                setLoading(false);
            })
            .catch(err => {
                console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å:', err);
                setLoading(false);
            });
    }, []);

    useEffect(() => {
        let filtered = [...orders];

        if (statusFilter) {
            filtered = filtered.filter(o => o.status === statusFilter);
        }

        if (searchNumber.trim()) {
            filtered = filtered.filter(o => o.orderNumber.toLowerCase().includes(searchNumber.toLowerCase()));
        }

        setFilteredOrders(filtered);
    }, [statusFilter, searchNumber, orders]);

    if (loading) return <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å...</p>;
    if (filteredOrders.length === 0) return <p>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</p>;

    return (
        <div className="order">
            <h1>–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h1>
            <div className="orders__filters">
                <label>
                    –°—Ç–∞—Ç—É—Å:
                    <select value={statusFilter} onChange={e => setStatusFilter(e.target.value)}>
                        <option value="">–£—Å—ñ</option>
                        <option value="pending">‚è∞ –í –æ–±—Ä–æ–±—Ü—ñ</option>
                        <option value="shipping">üöö –í –¥–æ—Å—Ç–∞–≤—Ü—ñ</option>
                        <option value="completed">‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ</option>
                        <option value="cancelled">‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ</option>
                    </select>
                </label>

                <label>
                    –ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º:
                    <input
                        type="text"
                        placeholder="–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
                        value={searchNumber}
                        onChange={e => setSearchNumber(e.target.value)}
                    />
                </label>
            </div>

            <div className="orders__container">
                {filteredOrders.map(order => (
                    <div key={order._id} className="order-item__container">
                        <div className="order-item">
                            <div className="order-item__info">
                                <h3><strong>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong> {order.orderNumber}</h3>
                                <p><strong>–î–∞—Ç–∞:</strong> {new Date(order.createdAt).toLocaleString('uk-UA')}</p>
                                <p><strong>–°—É–º–∞:</strong> {order.total} –≥—Ä–Ω</p>
                                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {
                                    {
                                        completed: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ',
                                        cancelled: '‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ',
                                        shipping: 'üöö –ü–µ—Ä–µ–¥–∞–Ω–æ –≤ –¥–æ—Å—Ç–∞–≤–∫—É',
                                        pending: '‚è∞ –í –æ–±—Ä–æ–±—Ü—ñ'
                                    }[order.status] || order.status
                                }</p>
                                <p><strong>–û–ø–ª–∞—Ç–∞:</strong> {
                                    {
                                        cash: '–ì–æ—Ç—ñ–≤–∫–∞',
                                        card: '–ö–∞—Ä—Ç–∫–∞ –∫—É—Ä º—î—Ä—É',
                                        cod: '–ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂'
                                    }[order.paymentMethod] || order.paymentMethod
                                }</p>
                                <p><strong>–î–æ—Å—Ç–∞–≤–∫–∞:</strong> {
                                    {
                                        pickup: '–°–∞–º–æ–≤–∏–≤—ñ–∑ –∑ –∫–ª—ñ–Ω—ñ–∫–∏',
                                        np_branch: `–ù–æ–≤–∞ –ü–æ—à—Ç–∞ (–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ‚Ññ${order.delivery.branch}, ${order.delivery.city})`,
                                        np_postomat: `–ù–æ–≤–∞ –ü–æ—à—Ç–∞ (–ø–æ—à—Ç–æ–º–∞—Ç ${order.delivery.postomat}, ${order.delivery.city})`,
                                        np_courier: `–ö—É—Ä º—î—Ä –ù–ü (${order.delivery.city}, ${order.delivery.address})`
                                    }[order.delivery.method] || '‚Äî'
                                }</p>
                            </div>
                            <div className="order-item__products">
                                <p><strong>–¢–æ–≤–∞—Ä–∏:</strong></p>
                                <ul>
                                    {order.items.map((item, idx) => (
                                        <li key={idx}>
                                            {item.productId?.name || '‚Äî'} ‚Äî {item.quantity} √ó {item.productId?.price} –≥—Ä–Ω
                                        </li>
                                    ))}
                                </ul>
                            </div>
                        </div>
                        <hr />
                    </div>
                ))}
            </div>
        </div>
    );
}
