import React, {useEffect, useState} from 'react';
import '../assets/styles/main.scss';
import Button from "../components/Button";


export default function AdminOrders() {
    const [orders, setOrders] = useState([]);
    const [selectedOrder, setSelectedOrder] = useState(null);
    const [isEditing, setIsEditing] = useState(false);
    const [editData, setEditData] = useState({});
    const [loading, setLoading] = useState(true);
    const [statusFilter, setStatusFilter] = useState('');
    const [searchNumber, setSearchNumber] = useState('');


    useEffect(() => {
        fetch('/api/admin/orders', {
            headers: {
                Authorization: 'Bearer ' + localStorage.getItem('token')
            }
        })
            .then(res => res.json())
            .then(data => {
                console.log('‚úÖ Orders from backend:', data);
                if (Array.isArray(data)) {
                    const sorted = data.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
                    setOrders(sorted);
                } else {
                    console.error('‚ùå –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ –º–∞—Å–∏–≤:', data);
                }
                setLoading(false);
            })
            .catch(err => {
                console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å:', err);
                setLoading(false);
            });
    }, []);

    const handleEditClick = () => {
        setEditData({
            status: selectedOrder.status,
            paymentMethod: selectedOrder.paymentMethod,
            city: selectedOrder.delivery?.city || '',
            deliveryType: selectedOrder.delivery?.type || '',
            deliveryAddress: selectedOrder.delivery?.address || '',
        });
        setIsEditing(true);
    };

    const handleSave = async () => {
        const res = await fetch(`/api/admin/orders/${selectedOrder._id}`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + localStorage.getItem('token')
            },
            body: JSON.stringify({
                status: editData.status,
                paymentMethod: editData.paymentMethod,
                delivery: {
                    type: editData.deliveryType,
                    city: editData.city,
                    address: editData.deliveryAddress
                }
            })
        });

        if (res.ok) {
            const updated = await res.json();
            setOrders(prev => prev.map(o => o._id === updated._id ? updated : o));
            setSelectedOrder(updated);
            setIsEditing(false);
        } else {
            alert('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω');
        }
    };

    if (loading) return <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>;

    return (
        <div className="admin-orders-container">
            {!selectedOrder ? <h1>–°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å</h1> : <h1>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{selectedOrder.orderNumber}</h1>}
            {!selectedOrder &&
                <>
                    <div className="admin-orders__filter">
                        <label>–§—ñ–ª—å—Ç—Ä –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º: </label>
                        <select value={statusFilter} onChange={e => setStatusFilter(e.target.value)}>
                            <option value="">–£—Å—ñ</option>
                            <option value="pending">üïí –í –æ–±—Ä–æ–±—Ü—ñ</option>
                            <option value="shipping">üöö –ü–µ—Ä–µ–¥–∞–Ω–æ –≤ –¥–æ—Å—Ç–∞–≤–∫—É</option>
                            <option value="completed">‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ</option>
                            <option value="cancelled">‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ</option>
                        </select>
                    </div>
                    <div className="admin-orders__search">
                        <label>–ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º: </label>
                        <input
                            type="text"
                            value={searchNumber}
                            onChange={e => setSearchNumber(e.target.value)}
                            placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
                        />
                    </div>
                </>

            }
            {!selectedOrder ? (
                <div className="admin-orders__orders-list">
                    {orders
                        .filter(order =>
                            (!statusFilter || order.status === statusFilter) &&
                            (!searchNumber || order.orderNumber.toLowerCase().includes(searchNumber.toLowerCase()))
                        )
                        .map(order => (

                            <div key={order._id} className="admin-order__item-container">
                                <div className="admin-order__item">
                                    <div className="admin-order__item-info">
                                        <h3><strong>‚Ññ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong> {order.orderNumber}</h3>
                                        <p>
                                            <strong>–î–∞—Ç–∞:</strong> {new Date(order.createdAt).toLocaleDateString('uk-UA')}
                                        </p>
                                        <p><strong>–°—É–º–∞:</strong> {order.total} –≥—Ä–Ω</p>
                                        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {
                                            {
                                                pending: '–í –æ–±—Ä–æ–±—Ü—ñ',
                                                shipping: '–ü–µ—Ä–µ–¥–∞–Ω–æ –≤ –¥–æ—Å—Ç–∞–≤–∫—É',
                                                completed: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
                                                cancelled: '–°–∫–∞—Å–æ–≤–∞–Ω–æ'
                                            }[order.status] || order.status
                                        }</p>
                                    </div>
                                    <div className={"admin-order__buttons"}>
                                        <Button className={"admin-orders__button admin-orders__details-button"}
                                                onClick={() => setSelectedOrder(order)} content={"–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ"}></Button>
                                    </div>
                                </div>

                                <hr/>
                            </div>
                        ))}
                </div>
            ) : (
                <div className="admin-order-details">
                    <p><strong>–î–∞—Ç–∞:</strong> {new Date(selectedOrder.createdAt).toLocaleString('uk-UA')}</p>
                    <p><strong>–°—É–º–∞:</strong> {selectedOrder.total} –≥—Ä–Ω</p>

                    {isEditing ? (
                        <div className={"admin-order__editing-container"}>
                            <p>
                                <strong>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</strong> {selectedOrder.userId?.firstName || '‚Äî'} {selectedOrder.userId?.lastName || ''}
                            </p>
                            <p><strong>Email:</strong> {selectedOrder.userId?.email || '‚Äî'}</p>
                            <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {selectedOrder.userId?.phone || '‚Äî'}</p>
                            <div className={"admin-order__editing"}>
                                <div className={"admin-order__editing-field"}>
                                    <label>–°—Ç–∞—Ç—É—Å:</label>
                                    <select value={editData.status}
                                            onChange={e => setEditData({...editData, status: e.target.value})}>
                                        <option value="pending">üïí –í –æ–±—Ä–æ–±—Ü—ñ</option>
                                        <option value="shipping">üöö –ü–µ—Ä–µ–¥–∞–Ω–æ –≤ –¥–æ—Å—Ç–∞–≤–∫—É</option>
                                        <option value="completed">‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ</option>
                                        <option value="cancelled">‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ</option>
                                    </select>
                                </div>
                                <div className={"admin-order__editing-field"}>
                                    <label>–û–ø–ª–∞—Ç–∞:</label>
                                    <select value={editData.paymentMethod}
                                            onChange={e => setEditData({
                                                ...editData,
                                                paymentMethod: e.target.value
                                            })}>
                                        <option value="cash">–ì–æ—Ç—ñ–≤–∫–∞</option>
                                        <option value="card">–ö–∞—Ä—Ç–∫–∞</option>
                                        <option value="cod">–ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂</option>
                                    </select>
                                </div>
                                <div className={"admin-order__editing-field"}>
                                    <label>–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:</label>
                                    <select value={editData.deliveryType}
                                            onChange={e => setEditData({...editData, deliveryType: e.target.value})}>
                                        <option value="pickup">–°–∞–º–æ–≤–∏–≤—ñ–∑</option>
                                        <option value="np_branch">–ù–æ–≤–∞ –ü–æ—à—Ç–∞ (–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è)</option>
                                        <option value="np_postamat">–ù–æ–≤–∞ –ü–æ—à—Ç–∞ (–ø–æ—à—Ç–æ–º–∞—Ç)</option>
                                        <option value="np_address">–ö—É—Ä º—î—Ä –ù–ü (–∞–¥—Ä–µ—Å–∞)</option>
                                    </select>
                                </div>
                                <div className={"admin-order__editing-field"}>
                                    <label>–ú—ñ—Å—Ç–æ:</label>
                                    <input type="text" value={editData.city}
                                           onChange={e => setEditData({...editData, city: e.target.value})}/>
                                </div>
                                <div className={"admin-order__editing-field"}>
                                    <label>–ê–¥—Ä–µ—Å–∞ / –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è / –ø–æ—à—Ç–æ–º–∞—Ç: </label>
                                    <input type="text" value={editData.deliveryAddress} placeholder={""}
                                           onChange={e => setEditData({...editData, deliveryAddress: e.target.value})}/>
                                </div>

                            </div>
                            <div className={"admin-order__editing-buttons"}>
                                <Button className={"admin-orders__button admin-orders__save-button"}
                                        onClick={handleSave} content={"–ó–±–µ—Ä–µ–≥—Ç–∏"}></Button>
                                <Button className={"admin-orders__button admin-orders__cancel-button"}
                                        onClick={() => setIsEditing(false)} content={"–°–∫–∞—Å—É–≤–∞—Ç–∏"}></Button>
                            </div>

                        </div>
                    ) : (
                        <>
                            <p>
                                <strong>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</strong> {selectedOrder.userId?.firstName || '‚Äî'} {selectedOrder.userId?.lastName || ''}
                            </p>
                            <p><strong>Email:</strong> {selectedOrder.userId?.email || '‚Äî'}</p>
                            <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {selectedOrder.userId?.phone || '‚Äî'}</p>

                            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {
                                {
                                    pending: '–í –æ–±—Ä–æ–±—Ü—ñ',
                                    shipping: '–ü–µ—Ä–µ–¥–∞–Ω–æ –≤ –¥–æ—Å—Ç–∞–≤–∫—É',
                                    completed: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
                                    cancelled: '–°–∫–∞—Å–æ–≤–∞–Ω–æ'
                                }[selectedOrder.status] || selectedOrder.status
                            }</p>
                            <p><strong>–û–ø–ª–∞—Ç–∞:</strong> {
                                {
                                    cash: '–ì–æ—Ç—ñ–≤–∫–∞',
                                    card: '–ö–∞—Ä—Ç–∫–∞',
                                    cod: '–ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂'
                                }[selectedOrder.paymentMethod] || selectedOrder.paymentMethod
                            }</p>
                            <p><strong>–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> {
                                {
                                    pickup: '–°–∞–º–æ–≤–∏–≤—ñ–∑',
                                    np_branch: '–ù–æ–≤–∞ –ü–æ—à—Ç–∞ (–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è)',
                                    np_postamat: '–ù–æ–≤–∞ –ü–æ—à—Ç–∞ (–ø–æ—à—Ç–æ–º–∞—Ç)',
                                    np_address: '–ö—É—Ä º—î—Ä –ù–ü (–∞–¥—Ä–µ—Å–∞)'
                                }[selectedOrder.delivery?.method] || '‚Äî'
                            }</p>
                            <p><strong>–ú—ñ—Å—Ç–æ:</strong> {selectedOrder.delivery?.city || '‚Äî'}</p>

                            <p><strong>–ê–¥—Ä–µ—Å–∞ / –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è / –ø–æ—à—Ç–æ–º–∞—Ç:</strong> {
                                selectedOrder.delivery?.branch || selectedOrder.delivery?.address || '‚Äî'
                            }</p>

                            <p><strong>–¢–æ–≤–∞—Ä–∏:</strong></p>
                            <ul>
                                {selectedOrder.items.map((item, idx) => (
                                    <li key={idx}>
                                        {item.productId?.name || '‚Äî'} ‚Äî {item.quantity} √ó {item.productId?.price} –≥—Ä–Ω
                                    </li>
                                ))}
                            </ul>
                            <div className={"admin-order__detail-buttons"}>
                                <Button className={"admin-orders__button admin-orders__edit-button"}
                                        onClick={handleEditClick} content={"–†–µ–¥–∞–≥—É–≤–∞—Ç–∏"}></Button>
                                <Button className={"admin-orders__button admin-orders__back-button"}
                                        onClick={() => setSelectedOrder(null)} content={"–ù–∞–∑–∞–¥"}></Button>
                            </div>
                        </>
                    )}
                </div>
            )}
        </div>
    );
}
